// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/kinetic_service.proto

package apikinetic

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KineticServiceClient is the client API for KineticService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KineticServiceClient interface {
	Kinetic(ctx context.Context, in *KineticRequest, opts ...grpc.CallOption) (*KineticResponse, error)
}

type kineticServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKineticServiceClient(cc grpc.ClientConnInterface) KineticServiceClient {
	return &kineticServiceClient{cc}
}

func (c *kineticServiceClient) Kinetic(ctx context.Context, in *KineticRequest, opts ...grpc.CallOption) (*KineticResponse, error) {
	out := new(KineticResponse)
	err := c.cc.Invoke(ctx, "/api.v1.KineticService/Kinetic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KineticServiceServer is the server API for KineticService service.
// All implementations must embed UnimplementedKineticServiceServer
// for forward compatibility
type KineticServiceServer interface {
	Kinetic(context.Context, *KineticRequest) (*KineticResponse, error)
	mustEmbedUnimplementedKineticServiceServer()
}

// UnimplementedKineticServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKineticServiceServer struct {
}

func (UnimplementedKineticServiceServer) Kinetic(context.Context, *KineticRequest) (*KineticResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Kinetic not implemented")
}
func (UnimplementedKineticServiceServer) mustEmbedUnimplementedKineticServiceServer() {}

// UnsafeKineticServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KineticServiceServer will
// result in compilation errors.
type UnsafeKineticServiceServer interface {
	mustEmbedUnimplementedKineticServiceServer()
}

func RegisterKineticServiceServer(s grpc.ServiceRegistrar, srv KineticServiceServer) {
	s.RegisterService(&KineticService_ServiceDesc, srv)
}

func _KineticService_Kinetic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KineticRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KineticServiceServer).Kinetic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.v1.KineticService/Kinetic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KineticServiceServer).Kinetic(ctx, req.(*KineticRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KineticService_ServiceDesc is the grpc.ServiceDesc for KineticService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KineticService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.KineticService",
	HandlerType: (*KineticServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Kinetic",
			Handler:    _KineticService_Kinetic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/kinetic_service.proto",
}
